# Generated by Django 4.2.13 on 2024-05-26 13:07

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('harbours', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Datetime when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Datetime when the record was last updated')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public unique identifier for the record', verbose_name='UUID')),
                ('name', models.CharField(help_text='Name of the contact person', max_length=100, verbose_name='name')),
                ('phone', models.CharField(help_text='Phone number of the contact person', max_length=20, verbose_name='phone')),
                ('email', models.EmailField(help_text='Email address of the contact person', max_length=255, verbose_name='email')),
            ],
            options={
                'verbose_name': 'contact person',
                'verbose_name_plural': 'contact persons',
            },
        ),
        migrations.CreateModel(
            name='OperatingCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Datetime when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Datetime when the record was last updated')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public unique identifier for the record', verbose_name='UUID')),
                ('name', models.CharField(help_text='Name of the operating company', max_length=100, verbose_name='name')),
                ('contact_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operating_companies', related_query_name='operating_company', to='ships.contactperson', verbose_name='contact person')),
            ],
            options={
                'verbose_name': 'operating company',
                'verbose_name_plural': 'operating companies',
            },
        ),
        migrations.CreateModel(
            name='Ship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Datetime when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Datetime when the record was last updated')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public unique identifier for the record', verbose_name='UUID')),
                ('name', models.CharField(help_text='Name of the ship', max_length=100, verbose_name='name')),
                ('tonnage', models.PositiveIntegerField(help_text='in metric tons', verbose_name='tonnage')),
                ('draft_max_load', models.FloatField(help_text='Draft under maximum load in meters', verbose_name='draft under maximum load')),
                ('draft_dry', models.FloatField(help_text='Draft without load in meters', verbose_name='draft dry')),
                ('type', models.CharField(choices=[('bulk_carrier', 'Bulk carrier'), ('fishing', 'Fishing'), ('submarine', 'Submarine'), ('tanker', 'Tanker'), ('cruise_ship', 'Cruise ship')], help_text='Type of the ship', max_length=50, verbose_name='type')),
                ('beam', models.FloatField(help_text='Beam in meters', verbose_name='beam')),
                ('length', models.FloatField(help_text='Length in meters', verbose_name='length')),
                ('flag', models.CharField(help_text='String representation of the flag', max_length=100, verbose_name='flag')),
                ('year_built', models.PositiveSmallIntegerField(help_text='Year the ship was built', validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)], verbose_name='year built')),
                ('operating_company', models.ForeignKey(help_text='Operating company of the ship', on_delete=django.db.models.deletion.CASCADE, related_name='ships', related_query_name='ship', to='ships.operatingcompany', verbose_name='operating company')),
            ],
            options={
                'verbose_name': 'ship',
                'verbose_name_plural': 'ships',
            },
        ),
        migrations.CreateModel(
            name='ShipMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Datetime when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Datetime when the record was last updated')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Public unique identifier for the record', verbose_name='UUID')),
                ('entered_at', models.DateTimeField(help_text='Date and time the ship entered the harbour', verbose_name='entered at')),
                ('exited_at', models.DateTimeField(blank=True, help_text='Date and time the ship exited the harbour', null=True, verbose_name='exited at')),
                ('harbour', models.ForeignKey(help_text='Harbour the ship moved to', on_delete=django.db.models.deletion.CASCADE, related_name='ship_movements', related_query_name='ship_movement', to='harbours.harbour')),
                ('ship', models.ForeignKey(help_text='Ship that moved', on_delete=django.db.models.deletion.CASCADE, related_name='ship_movements', related_query_name='ship_movement', to='ships.ship', verbose_name='ship')),
            ],
            options={
                'verbose_name': 'ship movement',
                'verbose_name_plural': 'ship movements',
            },
        ),
    ]
